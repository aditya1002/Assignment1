{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","pages","allchecked","setChecked","useState","isCheckAll","setIsCheckAll","handler","e","target","checked","value","filter","item","console","log","React","createElement","className","Card","style","width","height","boxShadow","Row","marginTop","Col","marginLeft","type","onChange","map","li","isChecked","float","marginRight","transform","borderTop","i","Fragment","includes","Button","marginBottom","variant","onClick","displayer","length","window","alert","String","reportWebVitals","onPerfEntry","Function","__webpack_require__","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"4PAkFeA,MA5Ef,WACE,MAAMC,EAAQ,CAAC,QAAS,QAAS,QAAS,UACnCC,EAAYC,GAAcC,mBAAS,KACnCC,EAAYC,GAAiBF,oBAAS,GAgBvCG,EAAWC,IACXA,EAAEC,OAAOC,QACXP,EAAW,IAAID,EAAYM,EAAEC,OAAOE,QAGpCR,EAAWD,EAAWU,OAAQC,GAASA,IAASL,EAAEC,OAAOE,SAI7D,OADAG,QAAQC,IAAIb,GAEVc,IAAAC,cAAA,OAAKC,UAAU,OACbF,IAAAC,cAAA,UAAQC,UAAU,cAChBF,IAAAC,cAACE,IAAI,CAACC,MAAO,CAAEC,MAAO,QAASC,OAAQ,QAASC,UAAW,iCAGzDP,IAAAC,cAAA,WACED,IAAAC,cAACO,IAAG,CAACJ,MAAO,CAAEK,UAAW,SACvBT,IAAAC,cAACS,IAAG,KACFV,IAAAC,cAAA,KAAGG,MAAO,CAAEO,WAAY,SAAU,cAEpCX,IAAAC,cAACS,IAAG,KACFV,IAAAC,cAAA,SAAOW,KAAK,WAAWC,SA5BbrB,IACtBF,GAAeD,GACfF,EAAWF,EAAM6B,IAAIC,GAAMA,IACvB1B,GACFF,EAAW,KAyBC6B,UAAW3B,EAAYe,MAAO,CAAEa,MAAO,QAASC,YAAa,OAAQC,UAAW,aAAcV,UAAW,YAI/GT,IAAAC,cAAA,MACEG,MAAO,CAAEgB,UAAW,iBAAkBT,WAAY,OAAQN,MAAO,SAEnEL,IAAAC,cAAA,OAAKG,MAAO,CAAEK,UAAW,SACtBxB,EAAM6B,IAAKO,GACVrB,IAAAC,cAAAD,IAAAsB,SAAA,KACEtB,IAAAC,cAACO,IAAG,KACFR,IAAAC,cAACS,IAAG,KACFV,IAAAC,cAAA,KAAGG,MAAO,CAAEO,WAAY,SAAWU,IAErCrB,IAAAC,cAACS,IAAG,KACFV,IAAAC,cAAA,SAAOW,KAAK,WAAWjB,MAAO0B,EAAG3B,QAASR,EAAWqC,SAASF,GAAIR,SAAUtB,EAASa,MAAO,CAAEa,MAAO,QAASC,YAAa,OAAQC,UAAW,qBAOxJnB,IAAAC,cAAA,MACEG,MAAO,CAAEgB,UAAW,iBAAkBT,WAAY,OAAQN,MAAO,SAGnEL,IAAAC,cAACuB,IAAM,CAACpB,MAAO,CAAEC,MAAO,QAASC,OAAQ,OAAQK,WAAY,OAAQc,aAAc,QAAUvB,UAAU,MAAMwB,QAAQ,UAAUC,QA/DvHC,KACZ1C,EAAW2C,OAAS,EACtBC,OAAOC,MAAM,aAAoBC,OAAO9C,IAGxC4C,OAAOC,MAAM,sBA0D4I,aC7DhJE,MAZSC,IAClBA,GAAeA,aAAuBC,UACxCC,EAAA5C,EAAA,GAAA6C,KAAAD,EAAAE,KAAA,UAAqBD,KAAKE,IAAiD,IAAhDC,OAAEA,EAAMC,OAAEA,EAAMC,OAAEA,EAAMC,OAAEA,EAAMC,QAAEA,GAASL,EACpEC,EAAON,GACPO,EAAOP,GACPQ,EAAOR,GACPS,EAAOT,GACPU,EAAQV,MCDDW,IAASC,WAAWC,SAASC,eAAe,SACpDC,OACHjD,IAAAC,cAACD,IAAMkD,WAAU,KACflD,IAAAC,cAACjB,EAAG,QAORiD","file":"static/js/main.9d182bbb.chunk.js","sourcesContent":["import './App.css';\nimport Card from 'react-bootstrap/Card';\nimport Row from 'react-bootstrap/Row';\nimport React, { useState } from 'react';\nimport Col from 'react-bootstrap/Col';\nimport Button from 'react-bootstrap/Button';\nfunction App() {\n  const pages = ['page1', 'page2', 'page3', 'page4'];\n  const [allchecked, setChecked] = useState([]);\n  const [isCheckAll, setIsCheckAll] = useState(false);\n  const displayer = () => {\n    if (allchecked.length > 0) {\n      window.alert(\"Selected \" + \" \" + String(allchecked));\n    }\n    else {\n      window.alert(\"No Page selected\");\n    }\n  }\n  const handleSelectAll = e => {\n    setIsCheckAll(!isCheckAll);\n    setChecked(pages.map(li => li));\n    if (isCheckAll) {\n      setChecked([]);\n    }\n  };\n  const handler = (e) => {\n    if (e.target.checked) {\n      setChecked([...allchecked, e.target.value]);\n    }\n    else {\n      setChecked(allchecked.filter((item) => item !== e.target.value));\n    }\n  }\n  console.log(allchecked);\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <Card style={{ width: '390px', height: '326px', boxShadow: \"1px 05px 05px 05px lightgrey\" }}>\n\n\n          <div>\n            <Row style={{ marginTop: \"12px\" }}>\n              <Col>\n                <p style={{ marginLeft: \"20px\" }}>All Pages</p>\n              </Col>\n              <Col>\n                <input type='checkbox' onChange={handleSelectAll}\n                  isChecked={isCheckAll} style={{ float: \"right\", marginRight: \"20px\", transform: \"scale(1.5)\", marginTop: \"10px\" }}></input>\n              </Col>\n            </Row>\n\n            <hr\n              style={{ borderTop: \"2px solid grey\", marginLeft: \"10px\", width: \"95%\" }}\n            ></hr>\n            <div style={{ marginTop: \"10px\" }}>\n              {pages.map((i) =>\n                <>\n                  <Row>\n                    <Col >\n                      <p style={{ marginLeft: \"20px\" }}>{i}</p>\n                    </Col>\n                    <Col>\n                      <input type='checkbox' value={i} checked={allchecked.includes(i)} onChange={handler} style={{ float: \"right\", marginRight: \"20px\", transform: \"scale(1.5)\" }}></input>\n                    </Col>\n                  </Row>\n                </>\n\n              )}\n            </div>\n            <hr\n              style={{ borderTop: \"2px solid grey\", marginLeft: \"10px\", width: \"95%\" }}\n            ></hr>\n\n            <Button style={{ width: \"340px\", height: \"40px\", marginLeft: \"20px\", marginBottom: \"20px\" }} className=\"But\" variant=\"warning\" onClick={displayer}>Done</Button>\n          </div>\n        </Card>\n\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}